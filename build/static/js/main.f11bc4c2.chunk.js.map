{"version":3,"sources":["actions/images.ts","reducers/images/index.ts","api/index.ts","reducers/index.ts","store/configureStore.ts","sagas/images/index.ts","sagas/index.ts","pages/ImagesDisplay/styled.ts","components/Card/styled.ts","components/Card/index.ts","components/Card/Card.tsx","components/Button/styled.ts","components/Button/index.ts","components/Button/Button.tsx","components/Modal/styled.ts","components/Modal/index.ts","components/Modal/Modal.tsx","pages/ImagesDisplay/ImagesDisplay.tsx","pages/ImagesDisplay/index.ts","styled.ts","styles/breakpoints.ts","styles/GlobalStyle.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["receiveImageInfoSuccess","response","type","payload","url","defaultImageInfoState","data","images","error","isLoading","state","action","reducers","combineReducers","defaultState","configureStore","initialState","sagaMiddleware","createSagaMiddleware","middleware","composeEnhancers","compose","store","createStore","applyMiddleware","get","a","axios","fetchImageInfo","call","put","message","takeLatest","rootSaga","all","Wrapper","styled","div","CardWrapper","InnerWrapper","activeImage","length","ButtonWrapper","Image","img","index","Card","image","onClick","src","copyright","site","button","Button","title","disabled","isOpen","Content","Close","span","Modal","children","closeModal","ImagesDisplay","loadImageInfo","React","useSelector","setActiveImage","setisOpen","setIndex","prev","next","map","key","id","enlarge","large_url","connect","dispatch","breakpointSizes","tablet","desktop","Object","keys","reduce","acc","label","first","interpolations","css","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f11bc4c2.chunk.js","sourcesContent":["import { ApiResponse } from \"../api\";\n\nexport const REQUEST_IMAGEINFO = \"REQUEST_IMAGEINFO\";\nexport const RECEIVE_IMAGEINFO_FAILURE = \"RECEIVE_IMAGEINFO_FAILURE\";\nexport const RECEIVE_IMAGEINFO_SUCCESS = \"RECEIVE_IMAGEINFO_SUCCESS\";\n\ninterface RequestImageInfoAction {\n  type: typeof REQUEST_IMAGEINFO;\n}\n\ninterface ReceiveImageInfoFailureAction {\n  type: typeof RECEIVE_IMAGEINFO_FAILURE;\n  payload: {\n    error: string;\n  };\n}\n\ninterface ReceiveImageInfoSuccessAction {\n  type: typeof RECEIVE_IMAGEINFO_SUCCESS;\n  payload: {\n    response: ApiResponse;\n  };\n}\n\nexport type ImageInfoAction =\n  | RequestImageInfoAction\n  | ReceiveImageInfoFailureAction\n  | ReceiveImageInfoSuccessAction;\n\nexport const requestImageInfo = (): RequestImageInfoAction => ({\n  type: REQUEST_IMAGEINFO\n});\n\nexport const receiveImageInfoFailure = (\n  error: string\n): ReceiveImageInfoFailureAction => ({\n  type: RECEIVE_IMAGEINFO_FAILURE,\n  payload: { error }\n});\n\nexport const receiveImageInfoSuccess = (\n  response: ApiResponse\n): ReceiveImageInfoSuccessAction => ({\n  type: RECEIVE_IMAGEINFO_SUCCESS,\n  payload: { response }\n});\n","import {\n  RECEIVE_IMAGEINFO_FAILURE,\n  RECEIVE_IMAGEINFO_SUCCESS,\n  REQUEST_IMAGEINFO,\n  ImageInfoAction\n} from \"../../actions/images\";\nimport { ImageInfoState } from \"../../types\";\n\nexport const defaultImageInfoState: ImageInfoState = {\n  data: { images: [] },\n  error: null,\n  isLoading: false\n};\n\nconst images = (\n  state: ImageInfoState = defaultImageInfoState,\n  action: ImageInfoAction\n): ImageInfoState => {\n  switch (action.type) {\n    case REQUEST_IMAGEINFO:\n      return {\n        ...state,\n        error: null,\n        isLoading: true\n      };\n    case RECEIVE_IMAGEINFO_FAILURE:\n      return {\n        ...state,\n        error: action.payload.error,\n        isLoading: false\n      };\n    case RECEIVE_IMAGEINFO_SUCCESS:\n      return {\n        ...state,\n        data: action.payload.response,\n        error: null,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nexport default images;\n","import axios from \"axios\";\nimport { ImageData } from \"../types\";\n\nexport type ApiResponse = ImageData;\n\ntype ApiGet<T> = () => Promise<T>;\n\nconst apiGet = <T>(url: string): ApiGet<T> => async (): Promise<T> => {\n  const { data } = await axios.get(url);\n  return data;\n};\n\nexport const images = {\n  get: apiGet<ApiResponse>(\n    \"http://www.splashbase.co/api/v1/images/search?query=cars\"\n  )\n};\n","import { combineReducers } from \"redux\";\nimport images from \"./images\";\n\nconst reducers = combineReducers({\n  images\n});\n\nexport default reducers;\n","import {\n  applyMiddleware,\n  compose,\n  createStore,\n  Middleware,\n  Store\n} from \"redux\";\nimport createSagaMiddleware, { SagaMiddleware } from \"redux-saga\";\nimport reducers from \"../reducers\";\n\nexport const defaultState = {\n  images: {\n    data: {},\n    error: null,\n    isLoading: false\n  }\n};\n\ninterface StoreConfig {\n  store: Store;\n  sagaMiddleware: SagaMiddleware<{}>;\n}\n\nexport const configureStore = (initialState = defaultState): StoreConfig => {\n  const sagaMiddleware: SagaMiddleware<{}> = createSagaMiddleware();\n\n  const middleware: Middleware[] = [sagaMiddleware];\n  let composeEnhancers = compose;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    /* eslint-disable-next-line no-underscore-dangle,@typescript-eslint/no-explicit-any */\n    if (\n      typeof window !== \"undefined\" &&\n      (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ) {\n      /* eslint-disable-next-line no-underscore-dangle,@typescript-eslint/no-explicit-any */\n      composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n    }\n  }\n\n  const store = createStore(\n    reducers,\n    initialState,\n    composeEnhancers(applyMiddleware(...middleware))\n  );\n\n  return { store, sagaMiddleware };\n};\n\nexport default configureStore;\n","import {\n  REQUEST_IMAGEINFO,\n  receiveImageInfoFailure,\n  receiveImageInfoSuccess\n} from \"../../actions/images\";\nimport { call, put, takeLatest, Effect } from \"redux-saga/effects\";\nimport { images } from \"../../api\";\n\nexport const fetchImageInfo = function* fetchImageInfo(): IterableIterator<\n  Effect\n> {\n  try {\n    const response = yield call(images.get);\n\n    if (response) {\n      yield put(receiveImageInfoSuccess(response));\n    }\n  } catch (error) {\n    yield put(receiveImageInfoFailure(error.message));\n  }\n};\n\nexport default takeLatest(REQUEST_IMAGEINFO, fetchImageInfo);\n","import { Saga } from \"redux-saga\";\nimport { all, Effect } from \"redux-saga/effects\";\nimport images from \"./images\";\n\nconst rootSaga: Saga = function* rootSaga(): IterableIterator<Effect> {\n  yield all([images]);\n};\n\nexport default rootSaga;\n","import styled from \"styled-components\";\n\ninterface StyledProps {\n  activeImage: number;\n  length: number;\n}\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-height: 500px;\n  overflow-x: hidden;\n`;\n\nexport const CardWrapper = styled.div`\n  position: relative;\n  max-width: 250px;\n  margin: 0 auto;\n`;\n\nexport const InnerWrapper = styled.div`\n  display: flex;\n  position: absolute;\n  margin-left: -125px;\n  transform: ${({ activeImage, length }: StyledProps) =>\n    `translateX(-${activeImage * (100 / length)}%)`};\n  transition: transform 300ms cubic-bezier(0.455, 0.03, 0.515, 0.955);\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n`;\n","import styled from \"styled-components\";\n\ntype StyledProps = {\n  activeImage: number;\n  index: number;\n};\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 250px;\n  flex: 1;\n  opacity: ${({ activeImage, index }: StyledProps) =>\n    activeImage === index ? `1` : `0.5`};\n  transform: ${({ activeImage, index }: StyledProps) =>\n    activeImage === index ? `scale(1)` : `scale(0.7)`};\n  transition: opacity 300ms linear,\n    transform 300ms cubic-bezier(0.455, 0.03, 0.515, 0.955);\n`;\n\nexport const Image = styled.img`\n  width: 250px;\n`;\n","import Card from \"./Card\";\nimport { ImageInfo } from \"../../types\";\n\nexport interface Props {\n  image: ImageInfo;\n  activeImage: number;\n  index: number;\n  onClick: () => void;\n}\n\nexport default Card;\n","import * as React from \"react\";\nimport { Wrapper, Image } from \"./styled\";\nimport { Props } from \".\";\n\nconst Card = ({\n  image,\n  activeImage,\n  index,\n  onClick\n}: Props): React.ReactElement => (\n  <Wrapper activeImage={activeImage} index={index} onClick={onClick}>\n    <Image src={image.url} />\n    <div>&copy;{image.copyright}</div>\n    <div>Site: {image.site}</div>\n  </Wrapper>\n);\n\nexport default Card;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.button`\n  border-radius: 5px;\n  padding: 15px;\n  margin: 15px;\n`;\n","import Button from \"./Button\";\n\nexport interface Props {\n  title: string;\n  onClick: () => void;\n  disabled: boolean;\n}\n\nexport default Button;\n","import * as React from \"react\";\nimport { Wrapper } from \"./styled\";\nimport { Props } from \".\";\n\nconst Button = ({ title, onClick, disabled }: Props): React.ReactElement => (\n  <Wrapper onClick={onClick} disabled={disabled}>\n    {title}\n  </Wrapper>\n);\n\nexport default Button;\n","import styled from \"styled-components\";\n\ninterface StyledProps {\n  isOpen: boolean;\n}\n\nexport const Wrapper = styled.div`\n  display: ${({ isOpen }: StyledProps) => (isOpen ? `block` : `none`)};\n  position: fixed;\n  z-index: 1;\n  padding-top: 100px;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgb(0, 0, 0);\n  background-color: rgba(0, 0, 0, 0.4);\n`;\n\nexport const InnerWrapper = styled.div`\n  position: relative;\n  width: 80%;\n  margin: auto;\n`;\n\nexport const Content = styled.div`\n  background-color: #fefefe;\n  padding: 30px;\n  border: 1px solid #888;\n`;\n\nexport const Close = styled.span`\n  color: #aaaaaa;\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  font-size: 28px;\n  font-weight: bold;\n\n  &:hover,\n  &:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }\n`;\n","import Modal from \"./Modal\";\n\nexport interface Props {\n  children: React.ReactNode;\n  isOpen: boolean;\n  closeModal: () => void;\n}\n\nexport default Modal;\n","import * as React from \"react\";\nimport { Wrapper, Content, Close, InnerWrapper } from \"./styled\";\nimport { Props } from \".\";\n\nconst Modal = ({ children, isOpen, closeModal }: Props): React.ReactElement => (\n  <Wrapper isOpen={isOpen}>\n    <InnerWrapper>\n      <Close onClick={closeModal}>&times;</Close>\n      <Content>{children}</Content>\n    </InnerWrapper>\n  </Wrapper>\n);\n\nexport default Modal;\n","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Wrapper,\n  CardWrapper,\n  InnerWrapper,\n  ButtonWrapper,\n  Image\n} from \"./styled\";\nimport Card from \"../../components/Card\";\nimport Button from \"../../components/Button\";\nimport Modal from \"../../components/Modal\";\nimport { ImageInfo } from \"../../types\";\nimport { ImageInfoProps, State, next, prev, enlarge, closeModal } from \".\";\n\nconst ImagesDisplay = ({\n  loadImageInfo\n}: ImageInfoProps): React.ReactElement => {\n  React.useEffect(() => {\n    loadImageInfo();\n  }, [loadImageInfo]);\n\n  const images: ImageInfo[] = useSelector(\n    (state: State) => state.images.data.images\n  );\n\n  const [activeImage, setActiveImage] = React.useState<number>(0);\n  const [isOpen, setisOpen] = React.useState<boolean>(false);\n  const [index, setIndex] = React.useState<number>(0);\n\n  return (\n    <Wrapper>\n      {images && (\n        <React.Fragment>\n          <ButtonWrapper>\n            <Button\n              onClick={prev(activeImage, setActiveImage)}\n              title=\"Prev\"\n              disabled={activeImage === 0}\n            />\n            <Button\n              onClick={next(activeImage, setActiveImage)}\n              title=\"Next\"\n              disabled={activeImage === images.length - 1}\n            />\n          </ButtonWrapper>\n          <CardWrapper>\n            <InnerWrapper activeImage={activeImage} length={images.length}>\n              {images.map((image, index) => (\n                <Card\n                  key={image.id}\n                  image={image}\n                  activeImage={activeImage}\n                  index={index}\n                  onClick={enlarge(setisOpen, setIndex, index)}\n                />\n              ))}\n            </InnerWrapper>\n          </CardWrapper>\n          <Modal isOpen={isOpen} closeModal={closeModal(setisOpen)}>\n            <Image src={images[index].large_url || images[index].url} />\n          </Modal>\n        </React.Fragment>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ImagesDisplay;\n","import { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { requestImageInfo } from \"../../actions/images\";\nimport { ImageInfoState } from \"../../types\";\nimport ImagesDisplay from \"./ImagesDisplay\";\n\nexport interface ImageInfoProps {\n  loadImageInfo: () => void;\n}\n\nexport interface State {\n  images: ImageInfoState;\n}\n\nexport const next = (\n  activeImage: number,\n  setActiveImage: (index: number) => void\n) => () => {\n  setActiveImage(activeImage + 1);\n};\n\nexport const prev = (\n  activeImage: number,\n  setActiveImage: (index: number) => void\n) => () => {\n  setActiveImage(activeImage - 1);\n};\n\nexport const enlarge = (\n  setisOpen: (isOpen: boolean) => void,\n  setIndex: (index: number) => void,\n  index: number\n) => () => {\n  setisOpen(true);\n  setIndex(index);\n};\n\nexport const closeModal = (setisOpen: (isOpen: boolean) => void) => () => {\n  setisOpen(false);\n};\n\nexport const mapDispatch = (dispatch: Dispatch): ImageInfoProps => ({\n  loadImageInfo: () => {\n    dispatch(requestImageInfo());\n  }\n});\n\nexport default connect(\n  null,\n  mapDispatch\n)(ImagesDisplay);\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 16px;\n`;\n","import { ThemedCssFunction, css } from \"styled-components\";\n\nexport const breakpointSizes = {\n  tablet: 768,\n  desktop: 1024\n};\n\ntype Breakpoints = {\n  [key in keyof typeof breakpointSizes]: ThemedCssFunction<{}>;\n};\n\nconst breakpoints = (Object.keys(\n  breakpointSizes\n) as (keyof typeof breakpointSizes)[]).reduce<Partial<Breakpoints>>(\n  (acc, label) => {\n    acc[label] = (first: any, ...interpolations: any[]) => css`\n      @media screen and (min-width: ${breakpointSizes[label]}px) {\n        ${css(first, ...interpolations)}\n      }\n    `;\n    return acc;\n  },\n  {}\n) as Breakpoints;\n\nexport default breakpoints;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: Arial, Helvetica, sans-serif;\n    margin: 0;\n  }\n\n  button {\n    cursor: pointer;\n    \n    &:focus {\n        outline: none;\n    }\n  }\n`;\n\nexport default GlobalStyle;\n","import React from \"react\";\nimport ImagesDisplay from \"./pages/ImagesDisplay\";\nimport { Wrapper } from \"./styled\";\nimport { GlobalStyle } from \"./styles\";\n\nconst App: React.FC = () => (\n  <Wrapper>\n    <GlobalStyle />\n    <ImagesDisplay />\n  </Wrapper>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './store/configureStore';\nimport rootSaga from './sagas';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst { store, sagaMiddleware } = configureStore();\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>,\ndocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}